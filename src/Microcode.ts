/**
 * Discrete 6502 Microinstructions
 * 
 * Based on C74-6502
 * @link https://c74project.com/
 * @link https://c74project.files.wordpress.com/2020/04/c74-6502-microinstructions.pdf
 */

const Microcode = [
    /** 0x00 */[0xFB, 0x12, 0x00, 0x00, 0x10, 0x00],   // *DP := 0
    /** 0x01 */[0xF0, 0x12, 0x00, 0x00, 0x10, 0x00],   // *DP := A
    /** 0x02 */[0xFE, 0x12, 0x00, 0x00, 0x10, 0x00],   // *DP := A&X
    /** 0x03 */[0xEE, 0x12, 0x80, 0x00, 0x10, 0x00],   // *DP := A&X AND DPH+1
    /** 0x04 */[0xF5, 0x12, 0x00, 0x00, 0x10, 0x00],   // *DP := T
    /** 0x05 */[0xF3, 0x12, 0x00, 0x00, 0x10, 0x00],   // *DP := X
    /** 0x06 */[0xE4, 0x12, 0x80, 0x00, 0x10, 0x00],   // *DP := X AND DPH+1
    /** 0x07 */[0xF4, 0x12, 0x00, 0x00, 0x10, 0x00],   // *DP := Y
    /** 0x08 */[0xE4, 0x12, 0x80, 0x00, 0x10, 0x00],   // *DP := Y AND DPH+1
    /** 0x09 */[0xF0, 0x22, 0x00, 0x00, 0x10, 0x00],   // *DPt := A
    /** 0x0A */[0xFE, 0x22, 0x00, 0x00, 0x10, 0x00],   // *DPt := A&X
    /** 0x0B */[0xEE, 0x22, 0x80, 0x00, 0x10, 0x00],   // *DPt := A&X AND DPH+1
    /** 0x0C */[0xFA, 0x22, 0x00, 0x00, 0x10, 0x00],   // *DPt := DPL
    /** 0x0D */[0xFB, 0x57, 0x00, 0x00, 0x30, 0x00],   // *SP := 0; SP -= 1
    /** 0x0E */[0xF0, 0x57, 0x00, 0x00, 0x10, 0x00],   // *SP := A; SP -= 1
    /** 0x0F */[0xF0, 0x57, 0xC0, 0x00, 0x10, 0x00],   // *SP := B; SP -= 1
    /** 0x10 */[0xFC, 0x57, 0xC0, 0x00, 0x32, 0x00],   // *SP := DBR; SP -= 1
    /** 0x11 */[0xFC, 0x57, 0xC0, 0x00, 0x34, 0x00],   // *SP := DH; SP -= 1
    /** 0x12 */[0xF1, 0x57, 0xC0, 0x00, 0x10, 0x00],   // *SP := DPH; SP -= 1
    /** 0x13 */[0xFA, 0x57, 0xC0, 0x00, 0x10, 0x00],   // *SP := DPL; SP -= 1
    /** 0x14 */[0xF7, 0x57, 0x00, 0x00, 0x10, 0x00],   // *SP := P; SP -= 1
    /** 0x15 */[0xF7, 0x57, 0x00, 0x00, 0x10, 0x10],   // *SP := P; SP -= 1; PBR.CLR
    /** 0x16 */[0xFC, 0x57, 0x00, 0x00, 0x31, 0x00],   // *SP := PBR; SP -= 1
    /** 0x17 */[0xF9, 0x57, 0x00, 0x00, 0x10, 0x00],   // *SP := PCH; SP -= 1
    /** 0x18 */[0xF8, 0x57, 0x00, 0x00, 0x10, 0x00],   // *SP := PCL; SP -= 1
    /** 0x19 */[0xF5, 0x57, 0x00, 0x00, 0x10, 0x00],   // *SP := T; SP -= 1
    /** 0x1A */[0xF3, 0x57, 0x00, 0x00, 0x10, 0x00],   // *SP := X; SP -= 1
    /** 0x1B */[0xF4, 0x57, 0x00, 0x00, 0x10, 0x00],   // *SP := Y; SP -= 1
    /** 0x1C */[0xFB, 0x42, 0x00, 0x00, 0x10, 0x00],   // *zDP := 0
    /** 0x1D */[0xF0, 0x42, 0x00, 0x00, 0x10, 0x00],   // *zDP := A
    /** 0x1E */[0xFE, 0x42, 0x00, 0x00, 0x10, 0x00],   // *zDP := A&X
    /** 0x1F */[0xF5, 0x42, 0x00, 0x00, 0x10, 0x00],   // *zDP := T
    /** 0x20 */[0xF3, 0x42, 0x00, 0x00, 0x10, 0x00],   // *zDP := X
    /** 0x21 */[0xF4, 0x42, 0x00, 0x00, 0x10, 0x00],   // *zDP := Y
    /** 0x22 */[0xAB, 0x02, 0x08, 0x00, 0x00, 0x00],   // A := 0
    /** 0x23 */[0xA0, 0x08, 0xFC, 0x44, 0x00, 0x00],   // A := A - 1; SETF(NZ); IR := *PC; PC += 1; END
    /** 0x24 */[0xA0, 0x08, 0x0C, 0x4C, 0x00, 0x00],   // A := A + 1; SETF(NZ); IR := *PC; PC += 1; END
    /** 0x25 */[0xA0, 0x08, 0xCE, 0x55, 0x00, 0x00],   // A := A ADC B; SETF(NZCV); IR := *PC; PC += 1; END.D
    /** 0x26 */[0xA0, 0x08, 0x8D, 0x24, 0x00, 0x00],   // A := A ALR B; SETF(NZC); IR := *PC; PC += 1; END
    /** 0x27 */[0xA0, 0x08, 0x8E, 0x2F, 0x00, 0x00],   // A := A AND B ROR; SETF(NZCV); IR := *PC; PC += 1; END.ARNC
    /** 0x28 */[0xA0, 0x08, 0x8C, 0x04, 0x00, 0x00],   // A := A AND B; SETF(NZ); IR := *PC; PC += 1; END
    /** 0x29 */[0xA0, 0x08, 0x8D, 0x07, 0x00, 0x00],   // A := A AND B; SETF(NZC); IR := *PC; PC += 1; END.ARNC
    /** 0x2A */[0xA0, 0x08, 0xAD, 0x44, 0x00, 0x00],   // A := A ASL 0; SETF(NZC); IR := *PC; PC += 1; END
    /** 0x2B */[0xA0, 0x08, 0x6C, 0x04, 0x00, 0x00],   // A := A EOR B; SETF(NZ); IR := *PC; PC += 1; END
    /** 0x2C */[0xA0, 0x08, 0xAD, 0x24, 0x00, 0x00],   // A := A LSR 0; SETF(NZC); IR := *PC; PC += 1; END
    /** 0x2D */[0xA0, 0x08, 0xEC, 0x04, 0x00, 0x00],   // A := A OR B; SETF(NZ); IR := *PC; PC += 1; END
    /** 0x2E */[0xA0, 0x02, 0xA8, 0x50, 0x00, 0x00],   // A := A ROL 0
    /** 0x2F */[0xA0, 0x08, 0xA8, 0x54, 0x00, 0x00],   // A := A ROL 0; IR := *PC; PC += 1; END
    /** 0x30 */[0xA0, 0x08, 0xAD, 0x54, 0x00, 0x00],   // A := A ROL 0; SETF(NZC); IR := *PC; PC += 1; END
    /** 0x31 */[0xA0, 0x08, 0xAD, 0x2C, 0x00, 0x00],   // A := A ROR 0; SETF(NZC); IR := *PC; PC += 1; END
    /** 0x32 */[0xA0, 0x08, 0x3E, 0x55, 0x00, 0x00],   // A := A SBC B; SETF(NZCV); IR := *PC; PC += 1; END.D
    /** 0x33 */[0xA0, 0x08, 0xCC, 0x04, 0x00, 0x00],   // A := B; SETF(NZ); IR := *PC; PC += 1; END
    /** 0x34 */[0xAC, 0x02, 0x08, 0x40, 0x06, 0x00],   // A := CFG
    /** 0x35 */[0xA2, 0x08, 0x0C, 0x44, 0x00, 0x00],   // A := SP; SETF(NZ); IR := *PC; PC += 1; END
    /** 0x36 */[0xA5, 0x08, 0x08, 0x44, 0x00, 0x00],   // A := T; IR := *PC; PC += 1; END
    /** 0x37 */[0xA3, 0x08, 0x8C, 0x04, 0x00, 0x00],   // A := X AND B; SETF(NZ); IR := *PC; PC += 1; END
    /** 0x38 */[0xA3, 0x08, 0x0C, 0x44, 0x00, 0x00],   // A := X; SETF(NZ); IR := *PC; PC += 1; END
    /** 0x39 */[0xA4, 0x08, 0x0C, 0x44, 0x00, 0x00],   // A := Y; SETF(NZ); IR := *PC; PC += 1; END
    /** 0x3A */[0xB0, 0x08, 0x8F, 0x34, 0x00, 0x00],   // A AND B; SETF(NZV); BIT; IR := *PC; PC += 1; END
    /** 0x3B */[0xB0, 0x08, 0x8B, 0x34, 0x00, 0x00],   // A AND B; SETF(Z); BIT; IR := *PC; PC += 1; END
    /** 0x3C */[0xB0, 0x08, 0x8B, 0x04, 0x00, 0x00],   // A AND B; SETF(Z); IR := *PC; PC += 1; END
    /** 0x3D */[0xB0, 0x08, 0x3D, 0x4C, 0x00, 0x00],   // A CMP B; SETF(NZC); IR := *PC; PC += 1; END
    /** 0x3E */[0x62, 0x08, 0x8C, 0x04, 0x00, 0x00],   // AXS := SP AND B; SETF(NZ); IR := *PC; PC += 1; END
]