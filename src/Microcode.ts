/**
 * Discrete 6502 Microinstructions
 * 
 * Based on C74-6502
 * @link https://c74project.com/
 * @link https://c74project.files.wordpress.com/2020/04/c74-6502-microinstructions.pdf
 */

const Microcode = [
    /** 0x00 */[0xFB, 0x12, 0x00, 0x00, 0x10, 0x00],   // *DP := 0
    /** 0x01 */[0xF0, 0x12, 0x00, 0x00, 0x10, 0x00],   // *DP := A
    /** 0x02 */[0xFE, 0x12, 0x00, 0x00, 0x10, 0x00],   // *DP := A&X
    /** 0x03 */[0xEE, 0x12, 0x80, 0x00, 0x10, 0x00],   // *DP := A&X AND DPH+1
    /** 0x04 */[0xF5, 0x12, 0x00, 0x00, 0x10, 0x00],   // *DP := T
    /** 0x05 */[0xF3, 0x12, 0x00, 0x00, 0x10, 0x00],   // *DP := X
    /** 0x06 */[0xE4, 0x12, 0x80, 0x00, 0x10, 0x00],   // *DP := X AND DPH+1
    /** 0x07 */[0xF4, 0x12, 0x00, 0x00, 0x10, 0x00],   // *DP := Y
    /** 0x08 */[0xE4, 0x12, 0x80, 0x00, 0x10, 0x00],   // *DP := Y AND DPH+1
    /** 0x09 */[0xF0, 0x22, 0x00, 0x00, 0x10, 0x00],   // *DPt := A
    /** 0x0A */[0xFE, 0x22, 0x00, 0x00, 0x10, 0x00],   // *DPt := A&X
    /** 0x0B */[0xEE, 0x22, 0x80, 0x00, 0x10, 0x00],   // *DPt := A&X AND DPH+1
    /** 0x0C */[0xFA, 0x22, 0x00, 0x00, 0x10, 0x00],   // *DPt := DPL
    /** 0x0D */[0xFB, 0x57, 0x00, 0x00, 0x30, 0x00],   // *SP := 0; SP -= 1
    /** 0x0E */[0xF0, 0x57, 0x00, 0x00, 0x10, 0x00],   // *SP := A; SP -= 1
    /** 0x0F */[0xF0, 0x57, 0xC0, 0x00, 0x10, 0x00],   // *SP := B; SP -= 1
    /** 0x10 */[0xFC, 0x57, 0xC0, 0x00, 0x32, 0x00],   // *SP := DBR; SP -= 1
    /** 0x11 */[0xFC, 0x57, 0xC0, 0x00, 0x34, 0x00],   // *SP := DH; SP -= 1
    /** 0x12 */[0xF1, 0x57, 0xC0, 0x00, 0x10, 0x00],   // *SP := DPH; SP -= 1
    /** 0x13 */[0xFA, 0x57, 0xC0, 0x00, 0x10, 0x00],   // *SP := DPL; SP -= 1
    /** 0x14 */[0xF7, 0x57, 0x00, 0x00, 0x10, 0x00],   // *SP := P; SP -= 1
    /** 0x15 */[0xF7, 0x57, 0x00, 0x00, 0x10, 0x10],   // *SP := P; SP -= 1; PBR.CLR
    /** 0x16 */[0xFC, 0x57, 0x00, 0x00, 0x31, 0x00],   // *SP := PBR; SP -= 1
    /** 0x17 */[0xF9, 0x57, 0x00, 0x00, 0x10, 0x00],   // *SP := PCH; SP -= 1
    /** 0x18 */[0xF8, 0x57, 0x00, 0x00, 0x10, 0x00],   // *SP := PCL; SP -= 1
    /** 0x19 */[0xF5, 0x57, 0x00, 0x00, 0x10, 0x00],   // *SP := T; SP -= 1
    /** 0x1A */[0xF3, 0x57, 0x00, 0x00, 0x10, 0x00],   // *SP := X; SP -= 1
    /** 0x1B */[0xF4, 0x57, 0x00, 0x00, 0x10, 0x00],   // *SP := Y; SP -= 1
    /** 0x1C */[0xFB, 0x42, 0x00, 0x00, 0x10, 0x00],   // *zDP := 0
    /** 0x1D */[0xF0, 0x42, 0x00, 0x00, 0x10, 0x00],   // *zDP := A
    /** 0x1E */[0xFE, 0x42, 0x00, 0x00, 0x10, 0x00],   // *zDP := A&X
    /** 0x1F */[0xF5, 0x42, 0x00, 0x00, 0x10, 0x00],   // *zDP := T
    /** 0x20 */[0xF3, 0x42, 0x00, 0x00, 0x10, 0x00],   // *zDP := X
    /** 0x21 */[0xF4, 0x42, 0x00, 0x00, 0x10, 0x00],   // *zDP := Y
    /** 0x22 */[0xAB, 0x02, 0x08, 0x00, 0x00, 0x00],   // A := 0
    /** 0x23 */[0xA0, 0x08, 0xFC, 0x44, 0x00, 0x00],   // A := A - 1; SETF(NZ); IR := *PC; PC += 1; END
    /** 0x24 */[0xA0, 0x08, 0x0C, 0x4C, 0x00, 0x00],   // A := A + 1; SETF(NZ); IR := *PC; PC += 1; END
    /** 0x25 */[0xA0, 0x08, 0xCE, 0x55, 0x00, 0x00],   // A := A ADC B; SETF(NZCV); IR := *PC; PC += 1; END.D
    /** 0x26 */[0xA0, 0x08, 0x8D, 0x24, 0x00, 0x00],   // A := A ALR B; SETF(NZC); IR := *PC; PC += 1; END
    /** 0x27 */[0xA0, 0x08, 0x8E, 0x2F, 0x00, 0x00],   // A := A AND B ROR; SETF(NZCV); IR := *PC; PC += 1; END.ARNC
    /** 0x28 */[0xA0, 0x08, 0x8C, 0x04, 0x00, 0x00],   // A := A AND B; SETF(NZ); IR := *PC; PC += 1; END
    /** 0x29 */[0xA0, 0x08, 0x8D, 0x07, 0x00, 0x00],   // A := A AND B; SETF(NZC); IR := *PC; PC += 1; END.ARNC
    /** 0x2A */[0xA0, 0x08, 0xAD, 0x44, 0x00, 0x00],   // A := A ASL 0; SETF(NZC); IR := *PC; PC += 1; END
    /** 0x2B */[0xA0, 0x08, 0x6C, 0x04, 0x00, 0x00],   // A := A EOR B; SETF(NZ); IR := *PC; PC += 1; END
    /** 0x2C */[0xA0, 0x08, 0xAD, 0x24, 0x00, 0x00],   // A := A LSR 0; SETF(NZC); IR := *PC; PC += 1; END
    /** 0x2D */[0xA0, 0x08, 0xEC, 0x04, 0x00, 0x00],   // A := A OR B; SETF(NZ); IR := *PC; PC += 1; END
    /** 0x2E */[0xA0, 0x02, 0xA8, 0x50, 0x00, 0x00],   // A := A ROL 0
    /** 0x2F */[0xA0, 0x08, 0xA8, 0x54, 0x00, 0x00],   // A := A ROL 0; IR := *PC; PC += 1; END
    /** 0x30 */[0xA0, 0x08, 0xAD, 0x54, 0x00, 0x00],   // A := A ROL 0; SETF(NZC); IR := *PC; PC += 1; END
    /** 0x31 */[0xA0, 0x08, 0xAD, 0x2C, 0x00, 0x00],   // A := A ROR 0; SETF(NZC); IR := *PC; PC += 1; END
    /** 0x32 */[0xA0, 0x08, 0x3E, 0x55, 0x00, 0x00],   // A := A SBC B; SETF(NZCV); IR := *PC; PC += 1; END.D
    /** 0x33 */[0xA0, 0x08, 0xCC, 0x04, 0x00, 0x00],   // A := B; SETF(NZ); IR := *PC; PC += 1; END
    /** 0x34 */[0xAC, 0x02, 0x08, 0x40, 0x06, 0x00],   // A := CFG
    /** 0x35 */[0xA2, 0x08, 0x0C, 0x44, 0x00, 0x00],   // A := SP; SETF(NZ); IR := *PC; PC += 1; END
    /** 0x36 */[0xA5, 0x08, 0x08, 0x44, 0x00, 0x00],   // A := T; IR := *PC; PC += 1; END
    /** 0x37 */[0xA3, 0x08, 0x8C, 0x04, 0x00, 0x00],   // A := X AND B; SETF(NZ); IR := *PC; PC += 1; END
    /** 0x38 */[0xA3, 0x08, 0x0C, 0x44, 0x00, 0x00],   // A := X; SETF(NZ); IR := *PC; PC += 1; END
    /** 0x39 */[0xA4, 0x08, 0x0C, 0x44, 0x00, 0x00],   // A := Y; SETF(NZ); IR := *PC; PC += 1; END
    /** 0x3A */[0xB0, 0x08, 0x8F, 0x34, 0x00, 0x00],   // A AND B; SETF(NZV); BIT; IR := *PC; PC += 1; END
    /** 0x3B */[0xB0, 0x08, 0x8B, 0x34, 0x00, 0x00],   // A AND B; SETF(Z); BIT; IR := *PC; PC += 1; END
    /** 0x3C */[0xB0, 0x08, 0x8B, 0x04, 0x00, 0x00],   // A AND B; SETF(Z); IR := *PC; PC += 1; END
    /** 0x3D */[0xB0, 0x08, 0x3D, 0x4C, 0x00, 0x00],   // A CMP B; SETF(NZC); IR := *PC; PC += 1; END
    /** 0x3E */[0x62, 0x08, 0x8C, 0x04, 0x00, 0x00],   // AXS := SP AND B; SETF(NZ); IR := *PC; PC += 1; END
    /** 0x3F */[0xB0, 0x12, 0x00, 0x00, 0x10, 0x00],   // B := *DP
    /** 0x40 */[0xB0, 0x14, 0x00, 0x00, 0x10, 0x00],   // B := *DP; DPL += 1
    /** 0x41 */[0xC0, 0x12, 0x00, 0x00, 0x10, 0x00],   // B := *DP; ML
    /** 0x42 */[0x50, 0x12, 0x48, 0x00, 0x10, 0x00],   // B := *DP; T := !A AND B
    /** 0x43 */[0x50, 0x12, 0xE8, 0x00, 0x10, 0x00],   // B := *DP; T := A OR B
    /** 0x44 */[0xB0, 0x22, 0x00, 0x00, 0x10, 0x00],   // B := *DPt
    /** 0x45 */[0xC0, 0x22, 0x00, 0x00, 0x10, 0x00],   // B := *DPt; ML
    /** 0x46 */[0xB0, 0x02, 0x00, 0x00, 0x10, 0x00],   // B := *PC
    /** 0x47 */[0xB0, 0x52, 0x00, 0x00, 0x10, 0x00],   // B := *SP
    /** 0x48 */[0xB0, 0x42, 0x00, 0x00, 0x10, 0x00],   // B := *zDP
    /** 0x49 */[0xB0, 0x44, 0x00, 0x00, 0x10, 0x00],   // B := *zDP; DPL += 1
    /** 0x4A */[0xC0, 0x42, 0x00, 0x00, 0x10, 0x00],   // B := *zDP; ML
    /** 0x4B */[0x50, 0x42, 0x48, 0x00, 0x10, 0x00],   // B := *zDP; T := !A AND B
    /** 0x4C */[0x50, 0x42, 0xE8, 0x00, 0x10, 0x00],   // B := *zDP; T := A OR B
    /** 0x4D */[0xB0, 0x02, 0x08, 0x40, 0x00, 0x05],   // BAR := A
    /** 0x4E */[0xBC, 0x08, 0x0C, 0x44, 0x04, 0x05],   // BAR := DH; SETF(NZ); IR := *PC; PC += 1; END
    /** 0x4F */[0xB5, 0x08, 0x08, 0x44, 0x00, 0x06],   // CFG := T; IR := *PC; PC += 1; END
    /** 0x50 */[0xB0, 0x08, 0xCC, 0x04, 0x00, 0x02],   // DBR := B; SETF(NZ); IR := *PC; PC += 1; END
    /** 0x51 */[0xB0, 0x56, 0x00, 0x00, 0x30, 0x04],   // DH := *SP; SP += 1
    /** 0x52 */[0xBC, 0x08, 0x0C, 0x44, 0x05, 0x04],   // DH := BAR; SETF(NZ); IR := *PC; PC += 1; END
    /** 0x53 */[0x10, 0x00, 0x00, 0x00, 0x00, 0x00],   // DPH := *PC; PC += 1
    /** 0x54 */[0x10, 0x42, 0x00, 0x00, 0x10, 0x00],   // DPH := *zDP
    /** 0x55 */[0x10, 0x44, 0x00, 0x00, 0x30, 0x40],   // DPH := *zDP; DPL += 1
    /** 0x56 */[0x10, 0x02, 0x08, 0x08, 0x00, 0x00],   // DPH := 1
    /** 0x57 */[0x10, 0x12, 0xC8, 0x18, 0x00, 0x00],   // DPH := B + 0; USE(IC); B := *DP
    /** 0x58 */[0x10, 0x32, 0xC8, 0x18, 0x00, 0x00],   // DPH := B + 0; USE(IC); B := *PBA
    /** 0x59 */[0x11, 0x12, 0x08, 0x58, 0x00, 0x00],   // DPH := DPH + 0; USE(IC); B := *DP
    /** 0x5A */[0x11, 0x22, 0x08, 0x58, 0x00, 0x00],   // DPH := DPH + 0; USE(IC); B := *DPt
    /** 0x5B */[0x11, 0x32, 0x08, 0x58, 0x00, 0x00],   // DPH := DPH + 0; USE(IC); B := *PBA
    /** 0x5C */[0x11, 0x00, 0x08, 0x58, 0x00, 0x23],   // DPH := DPH + 0; USE(IC); TBR.db := *PC; PC += 1
    /** 0x5D */[0x11, 0x42, 0x08, 0x58, 0x30, 0x63],   // DPH := DPH + 0; USE(IC); TBR.db := *zDP
    /** 0x5E */[0x19, 0x00, 0xC8, 0x58, 0x00, 0x00],   // DPH := PCH + B; USE(IC); B := *PC; PC += 1
    /** 0x5F */[0x00, 0x10, 0x00, 0x00, 0x00, 0x00],   // DPL := *DP; PC += 1
    /** 0x60 */[0x0B, 0x32, 0xCD, 0x80, 0x00, 0x00],   // DPL := 0 ASL B; SETF(NZC)
    /** 0x61 */[0x0B, 0x32, 0xCD, 0x20, 0x00, 0x00],   // DPL := 0 LSR B; SETF(NZC)
    /** 0x62 */[0x0B, 0x32, 0xCD, 0x90, 0x00, 0x00],   // DPL := 0 ROL B; SETF(NZC)
    /** 0x63 */[0x0B, 0x32, 0xCD, 0x28, 0x00, 0x00],   // DPL := 0 ROR B; SETF(NZC)
    /** 0x64 */[0x0B, 0x32, 0xFC, 0x80, 0x00, 0x00],   // DPL := B - 1; SETF(NZ)
    /** 0x65 */[0x00, 0x02, 0x00, 0x00, 0x00, 0x00],   // DPL := B := *PC
    /** 0x66 */[0x00, 0x00, 0x00, 0x00, 0x00, 0x00],   // DPL := B := *PC; PC += 1
    /** 0x67 */[0x00, 0x00, 0x00, 0x03, 0x00, 0x00],   // DPL := B := *PC; PC += 1; EXIT.BTF
    /** 0x68 */[0x00, 0x32, 0x0C, 0x88, 0x00, 0x00],   // DPL := B + 1; SETF(NZ)
    /** 0x69 */[0x02, 0x02, 0xC8, 0x40, 0x00, 0x00],   // DPL := B + SP
    /** 0x6A */[0x03, 0x32, 0xC8, 0x40, 0x00, 0x00],   // DPL := B + X; B := *PBA
    /** 0x6B */[0x03, 0x02, 0xC8, 0x40, 0x00, 0x00],   // DPL := B + X; B := *PC
    /** 0x6C */[0x03, 0x00, 0xC8, 0x40, 0x00, 0x00],   // DPL := B + X; B := *PC; PC += 1
    /** 0x6D */[0x03, 0x42, 0xC8, 0x40, 0x00, 0x00],   // DPL := B + X; B := *zDP
    /** 0x6E */[0x03, 0x80, 0xC8, 0x40, 0x00, 0x00],   // DPL := B + X; DPH.db := *PC; PC += 1
    /** 0x6F */[0x03, 0x80, 0xC8, 0x42, 0x00, 0x00],   // DPL := B + X; DPH.db := *PC; PC += 1; INCDPH.C
    /** 0x70 */[0x04, 0x32, 0xC8, 0x40, 0x00, 0x00],   // DPL := B + Y; B := *PBA
    /** 0x71 */[0x04, 0x02, 0xC8, 0x40, 0x00, 0x00],   // DPL := B + Y; B := *PC
    /** 0x72 */[0x04, 0x00, 0xC8, 0x40, 0x00, 0x00],   // DPL := B + Y; B := *PC; PC += 1
    /** 0x73 */[0x04, 0x42, 0xC8, 0x40, 0x00, 0x00],   // DPL := B + Y; B := *zDP
    /** 0x74 */[0x04, 0x92, 0xC8, 0x42, 0x10, 0x00],   // DPL := B + Y; DPH.db := *DP; INCDPH.C
    /** 0x75 */[0x04, 0x80, 0xC8, 0x40, 0x00, 0x00],   // DPL := B + Y; DPH.db := *PC; PC += 1
    /** 0x76 */[0x04, 0x80, 0xC8, 0x42, 0x00, 0x00],   // DPL := B + Y; DPH.db := *PC; PC += 1; INCDPH.C
    /** 0x77 */[0x04, 0xC2, 0xC8, 0x40, 0x10, 0x00],   // DPL := B + Y; DPH.db := *zDP
    /** 0x78 */[0x04, 0xC2, 0xC8, 0x42, 0x10, 0x00],   // DPL := B + Y; DPH.db := *zDP; INCDPH.C
    /** 0x79 */[0x08, 0x02, 0xC8, 0x48, 0x00, 0x00],   // DPL := PCL + B + 1; B := *PC
    /** 0x7A */[0x05, 0x02, 0x08, 0x40, 0x00, 0x00],   // DPL := T
    /** 0x7B */[0xB0, 0x18, 0x00, 0x04, 0x00, 0x00],   // IR := *DP; PC += 1; END
    /** 0x7C */[0x00, 0x08, 0x00, 0x04, 0x00, 0x00],   // IR := *PC; PC += 1; END
    /** 0x7D */[0x00, 0x08, 0x00, 0x06, 0x00, 0x00],   // IR := *PC; PC += 1; END.INT
    /** 0x7E */[0xB0, 0x32, 0x00, 0x00, 0x00, 0x00],   // NOP
    /** 0x7F */[0x70, 0x52, 0x00, 0x00, 0x10, 0x00],   // P := *SP
    /** 0x80 */[0x70, 0x56, 0x00, 0x00, 0x10, 0x00],   // P := *SP; SP += 1
    /** 0x81 */[0x77, 0x08, 0x28, 0x04, 0x00, 0x00],   // P := P AND !B; IR := *PC; PC += 1; END
    /** 0x82 */[0x77, 0x08, 0xE8, 0x04, 0x00, 0x00],   // P := P OR B; IR := *PC; PC += 1; END
    /** 0x83 */[0xB0, 0x00, 0x00, 0x00, 0x00, 0x01],   // PBR := *PC; PC += 1
    /** 0x84 */[0xB0, 0x52, 0x00, 0x00, 0x30, 0x01],   // PBR := *SP
    /** 0x85 */[0xBB, 0x02, 0x08, 0x00, 0x00, 0x01],   // PBR := 0
    /** 0x86 */[0x00, 0x33, 0x00, 0x00, 0x00, 0x00],   // PC -= 1
    /** 0x87 */[0x90, 0x12, 0x00, 0x00, 0x00, 0x00],   // PCH := *DP
    /** 0x88 */[0x90, 0x62, 0x02, 0x00, 0x00, 0x00],   // PCH := *fDP; SETF(SEI/CLD)
    /** 0x89 */[0x90, 0x52, 0x00, 0x00, 0x10, 0x00],   // PCH := *SP
    /** 0x8A */[0x90, 0x56, 0x00, 0x00, 0x30, 0x00],   // PCH := *SP; SP += 1
    /** 0x8B */[0x90, 0x32, 0xC8, 0x18, 0x00, 0x00],   // PCH := B + 0; USE(IC)
    /** 0x8C */[0x99, 0x02, 0xC8, 0x78, 0x00, 0x00],   // PCH := PCH + signextend(*); USE(IC)
    /** 0x8D */[0x80, 0x12, 0x00, 0x00, 0x10, 0x00],   // PCL := *DP
    /** 0x8E */[0x80, 0x14, 0x00, 0x00, 0x00, 0x00],   // PCL := *DP; DPL += 1
    /** 0x8F */[0x80, 0x74, 0x00, 0x00, 0x00, 0x00],   // PCL := *fCP; DPL += 1
    /** 0x90 */[0x80, 0x56, 0x00, 0x00, 0x10, 0x00],   // PCL := *SP; SP += 1
    /** 0x91 */[0x83, 0x02, 0xC8, 0x40, 0x00, 0x00],   // PCL := B + X; B := *PC
    /** 0x92 */[0x88, 0x02, 0xC8, 0x41, 0x00, 0x00],   // PCL := PCL + B; EXIT.CC
    /** 0x93 */[0xB0, 0x08, 0x09, 0x04, 0x00, 0x00],   // SETF(OPCODE 0); IR := *PC; PC += 1; END
    /** 0x94 */[0xB0, 0x08, 0xF9, 0x04, 0x00, 0x00],   // SETF(OPCODE 1); IR := *PC; PC += 1; END
    /** 0x95 */[0x2E, 0x08, 0x08, 0x44, 0x00, 0x00],   // SP := A&X; IR := *PC; PC += 1; END
    /** 0x96 */[0x20, 0x08, 0x08, 0x44, 0x00, 0x00],   // SP := A; IR := *PC; PC += 1; END
    /** 0x97 */[0x23, 0x08, 0x08, 0x44, 0x00, 0x00],   // SP := X; IR := *PC; PC += 1; END
    /** 0x98 */[0xB0, 0x56, 0x00, 0x00, 0x00, 0x00],   // SP += 1; B := *SP
    /** 0x99 */[0xB6, 0x02, 0xC0, 0x00, 0x00, 0x00],   // SPI (ALU PASS B)
    /** 0x9A */[0xBD, 0x08, 0x00, 0x04, 0x00, 0x00],   // STP; IR := *PC; PC += 1; END
    /** 0x9B */[0x50, 0x00, 0x38, 0x03, 0x00, 0x00],   // T := !B; B := *PC; PC += 1; END
    /** 0x9C */[0x5F, 0x02, 0xD8, 0x00, 0x00, 0x00],   // T := !BCG OR B
    /** 0x9D */[0x50, 0x44, 0x00, 0x00, 0x10, 0x00],   // T := *zDP; DPL += 1
    /** 0x9E */[0x5B, 0x32, 0xCD, 0x80, 0x00, 0x00],   // T := 0 ASL B; SETF(NZC)
    /** 0x9F */[0x5B, 0x32, 0xCD, 0x20, 0x00, 0x00],   // T := 0 LSR B; SETF(NZC)
    /** 0xA0 */[0x5B, 0x32, 0xCD, 0x90, 0x00, 0x00],   // T := 0 ROL B; SETF(NZC)
    /** 0xA1 */[0x5B, 0x32, 0xCD, 0x28, 0x00, 0x00],   // T := 0 ROR B; SETF(NZC)
    /** 0xA2 */[0x50, 0x02, 0x08, 0x40, 0x00, 0x00],   // T := A


]